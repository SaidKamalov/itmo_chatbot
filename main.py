from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
import os
from my_secrets import BOT_KEY
from config import STUDY_PROGRAMS

# Define conversation states
START, SHOWING_PROGRAMS, PROGRAM_DETAILS = range(3)

# List of available study programs
study_program_list = [v["name"] for k, v in STUDY_PROGRAMS.items()]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Send a message when the command /start is issued."""
    keyboard = [[KeyboardButton("Start")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ 'Start' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=reply_markup
    )

    return START


async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle the 'Start' button press and move to showing programs state."""
    keyboard = [[KeyboardButton("Show Study Programs")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n–ù–∞–∂–º–∏—Ç–µ 'Show Study Programs', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.",
        reply_markup=reply_markup,
    )

    return SHOWING_PROGRAMS


async def show_programs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show list of study programs and move to program details state."""
    programs_str = "\n".join(f"- {p}" for p in study_program_list)

    # Create keyboard with program buttons
    keyboard = [[KeyboardButton(p)] for p in study_program_list]
    # Add a button to go back to start
    keyboard.append([KeyboardButton("‚óÄÔ∏è Back to Start")])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º:\n{programs_str}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.",
        reply_markup=reply_markup,
    )

    return PROGRAM_DETAILS


async def show_program_details(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Show details for a specific program and offer to download the study plan."""
    user_text = update.message.text

    # Handle back button
    if user_text == "‚óÄÔ∏è Back to Start":
        return await start_conversation(update, context)

    # Check if the user requested a PDF download
    if user_text == "üìÑ –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω":
        # Get the selected program from context
        selected_program = context.user_data.get("selected_program")
        if selected_program:
            # Find the local path for this program
            local_path = None

            for url, info in STUDY_PROGRAMS.items():
                if info["name"] == selected_program:
                    local_path = info.get("path_to_study_plan")
                    break

            if local_path and os.path.exists(local_path):
                # We have the file locally, send it
                try:
                    await update.message.reply_document(
                        document=open(local_path, "rb"),
                        filename=f"–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω - {selected_program}.pdf",
                        caption=f"–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã '{selected_program}'",
                    )

                    # Create keyboard with program options
                    keyboard = [
                        [KeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É")],
                        [KeyboardButton("‚óÄÔ∏è Back to Start")],
                    ]

                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                    await update.message.reply_text(
                        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup
                    )
                except Exception as e:
                    await update.message.reply_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
                    )
            else:
                await update.message.reply_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∞–π–ª —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )

            return PROGRAM_DETAILS
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è.")
            return await show_programs(update, context)

    # Find the program details
    if user_text in study_program_list:
        # Save the selected program in context
        context.user_data["selected_program"] = user_text

        # Get program description
        description = None
        for k, v in STUDY_PROGRAMS.items():
            if v["name"] == user_text:
                description = v.get("description")
                break

        if not description:
            description = "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        # Create keyboard with program options
        keyboard = [
            [KeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω")],
            [KeyboardButton("‚óÄÔ∏è Back to Start")],
            [KeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É")],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ {user_text}:\n\n{description}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üìÑ –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å —É—á–µ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º.",
            reply_markup=reply_markup,
        )

        return PROGRAM_DETAILS
    elif user_text == "üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É":
        return await show_programs(update, context)
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π."
        )

        # Show programs again
        return await show_programs(update, context)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel and end the conversation."""
    await update.message.reply_text(
        "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.",
        reply_markup=ReplyKeyboardRemove(),
    )

    return ConversationHandler.END


def main():
    """Start the bot."""
    app = Application.builder().token(BOT_KEY).build()

    # Create the conversation handler with states
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START: [MessageHandler(filters.Regex("^Start$"), start_conversation)],
            SHOWING_PROGRAMS: [
                MessageHandler(filters.Regex("^Show Study Programs$"), show_programs)
            ],
            PROGRAM_DETAILS: [
                MessageHandler(
                    filters.Regex("^üìÑ –°–∫–∞—á–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω$"), show_program_details
                ),
                MessageHandler(
                    filters.Regex("^üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É$"), show_programs
                ),
                MessageHandler(filters.TEXT & ~filters.COMMAND, show_program_details),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    # Start the Bot
    app.run_polling()


if __name__ == "__main__":
    main()
